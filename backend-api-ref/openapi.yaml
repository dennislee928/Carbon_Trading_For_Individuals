openapi: 3.0.0
info:
  description: 碳交易 API 服務
  title: Carbon Trade API
  termsOfService: http://example.com/terms
  contact:
    name: API Support
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
paths:
  /admin/admins:
    get:
      security:
        - BearerAuth: []
      description: 獲取管理員列表，包含分頁資訊。
      tags:
        - admin
      summary: 獲取管理員列表
      parameters:
        - description: 搜索關鍵字
          name: search
          in: query
          schema:
            type: string
        - description: 排序方式
          name: sort
          in: query
          schema:
            type: string
        - description: 頁碼
          name: page
          in: query
          schema:
            type: string
      responses:
        "200":
          description: 成功獲取管理員列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.AdminListResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  /admin/users:
    get:
      security:
        - BearerAuth: []
      description: Retrieve a list of all users (admin-only).
      tags:
        - admin
      summary: Get all users
      responses:
        "200":
          description: Successfully retrieved user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.User"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
    post:
      security:
        - BearerAuth: []
      description: Create a new user (admin-only).
      tags:
        - admin
      summary: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.User"
        description: User information
        required: true
      responses:
        "201":
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.User"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/admin/users/{id}":
    get:
      security:
        - BearerAuth: []
      description: Retrieve detailed information for a specific user by ID (admin-only).
      tags:
        - admin
      summary: Get a specific user
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
    put:
      security:
        - BearerAuth: []
      description: Update specific user's information (admin-only).
      tags:
        - admin
      summary: Update user
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.AdminUserUpdate"
        description: Updated user information
        required: true
      responses:
        "200":
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.User"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
    delete:
      security:
        - BearerAuth: []
      description: Delete a specific user (admin-only).
      tags:
        - admin
      summary: Delete user
      parameters:
        - description: User ID
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted user
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  /auth/login:
    post:
      description: 允許用戶使用其電子郵件和密碼登入。
      tags:
        - auth
      summary: 用戶登入
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.LoginRequest"
        description: 登入資訊
        required: true
      responses:
        "200":
          description: 成功登入，返回 Token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.LoginResponse"
        "400":
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  /auth/me:
    get:
      security:
        - BearerAuth: []
      description: 獲取當前已登錄用戶的資訊。
      tags:
        - auth
      summary: 獲取當前用戶資訊
      responses:
        "200":
          description: 成功獲取用戶資訊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.GetUserResponse"
        "401":
          description: 未授權
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  /auth/register:
    post:
      description: 註冊一個新的用戶帳戶。
      tags:
        - auth
      summary: 註冊新用戶
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.SignupRequest"
        description: 註冊資訊
        required: true
      responses:
        "200":
          description: 成功註冊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SignupResponse"
        "400":
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/auth/users/{userID}":
    delete:
      security:
        - BearerAuth: []
      description: 刪除指定ID的用戶帳戶
      tags:
        - auth
      summary: 刪除用戶
      parameters:
        - description: 用戶ID
          name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功刪除用戶
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "400":
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "401":
          description: 未授權
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  /carbonCredits:
    get:
      description: 獲取碳信用額列表，可以根據篩選條件進行篩選。
      tags:
        - carbonCredits
      summary: 獲取碳信用額
      parameters:
        - description: "碳信用類型 (例如: VER, CER)"
          name: creditType
          in: query
          schema:
            type: string
        - description: 年份
          name: vintageYear
          in: query
          schema:
            type: integer
        - description: 項目類型
          name: projectType
          in: query
          schema:
            type: string
      responses:
        "200":
          description: 成功獲取碳信用額列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.CarbonCredit"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/carbonCredits/{creditId}":
    get:
      description: 根據 ID 獲取特定碳信用額的詳細資訊。
      tags:
        - carbonCredits
      summary: 獲取特定碳信用額
      parameters:
        - description: 碳信用額 ID
          name: creditId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功獲取碳信用額
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.CarbonCredit"
        "404":
          description: 碳信用額未找到
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  /trades/create:
    post:
      description: 創建新的交易訂單。
      tags:
        - trades
      summary: 創建交易
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.CreateTradeRequest"
        description: 交易資訊
        required: true
      responses:
        "200":
          description: 成功創建交易
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.Trade"
        "400":
          description: 無效的請求
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/trades/orders/{userID}":
    get:
      description: 獲取特定用戶的交易訂單列表。
      tags:
        - trades
      summary: 獲取用戶的交易訂單
      parameters:
        - description: 用戶 ID
          name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功獲取交易訂單
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.Trade"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/users/{uid}":
    get:
      security:
        - BearerAuth: []
      description: Retrieve detailed information for a specific user by ID.
      tags:
        - admin
      summary: Get a specific user
      parameters:
        - description: User ID
          name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.GetUserResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/users/{userID}/assets":
    get:
      security:
        - BearerAuth: []
      description: 獲取特定用戶的資產列表。
      tags:
        - users
      summary: 獲取用戶資產
      parameters:
        - description: User ID
          name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user assets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.Asset"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/users/{userID}/profile":
    get:
      security:
        - BearerAuth: []
      description: 獲取特定用戶的資料。
      tags:
        - admin
      summary: 獲取用戶資料
      parameters:
        - description: 用戶 ID
          name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功獲取用戶資料
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.UserProfile"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
    put:
      security:
        - BearerAuth: []
      description: 更新特定用戶的資料。
      tags:
        - users
      summary: 更新用戶資料
      parameters:
        - description: User ID
          name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/models.UserProfileUpdate"
        description: Updated user profile data
        required: true
      responses:
        "200":
          description: Successfully updated user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.UserProfile"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
        "500":
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
  "/users/{userID}/tradeHistory":
    get:
      security:
        - BearerAuth: []
      description: Retrieve trade history for a specific user.
      tags:
        - users
      summary: Get user trade history
      parameters:
        - description: User ID
          name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user trade history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.Trade"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
servers:
  - url: https://apiv1-carbontrading.dennisleehappy.org/
components:
  securitySchemes:
    BearerAuth:
      description: Type "Bearer" followed by a space and JWT token.
      type: apiKey
      name: Authorization
      in: header
  schemas:
    models.Admin:
      type: object
      properties:
        address:
          type: string
        created_at:
          type: string
        email:
          type: string
        id:
          type: string
        last_login:
          type: string
        level:
          type: integer
        name:
          type: string
        phone:
          type: string
        role:
          type: string
        status:
          type: string
        updated_at:
          type: string
        user_id:
          type: string
    models.AdminListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            admins:
              type: array
              items:
                $ref: "#/components/schemas/models.Admin"
            pagination:
              $ref: "#/components/schemas/models.Pagination"
        status:
          type: string
    models.AdminUserUpdate:
      type: object
      properties:
        name:
          description: Define fields like Role, etc.
          type: string
        role:
          type: string
    models.Asset:
      type: object
      properties:
        created_at:
          type: string
        credit_type:
          type: string
        id:
          type: string
        project_type:
          type: string
        quantity:
          type: number
        user_id:
          type: string
        vintage_year:
          type: integer
    models.CarbonCredit:
      type: object
      properties:
        created_at:
          type: string
        credit_type:
          description: e.g., "VER", "CER"
          type: string
        id:
          type: string
        issuer:
          type: string
        origin:
          type: string
        price:
          type: number
        project_type:
          description: e.g., "Renewable Energy", "Forestry"
          type: string
        quantity:
          type: number
        vintage_year:
          type: integer
    models.CreateTradeRequest:
      type: object
      properties:
        order_type:
          type: string
        price:
          type: number
        quantity:
          type: number
        user_id:
          type: string
    models.ErrorResponse:
      type: object
      properties:
        error:
          type: string
    models.GetUserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/models.User"
        status:
          type: string
    models.LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    models.LoginResponse:
      type: object
      properties:
        status:
          type: string
        token:
          type: string
    models.Pagination:
      type: object
      properties:
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
    models.SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
    models.SignupResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    models.Trade:
      type: object
      properties:
        created_at:
          type: string
        id:
          type: string
        order_type:
          type: string
        price:
          type: number
        quantity:
          type: number
        status:
          type: string
        user_id:
          type: string
    models.User:
      type: object
      properties:
        address:
          type: string
        created_at:
          type: string
        email:
          type: string
        id:
          type: string
        last_login:
          type: string
        level:
          type: integer
        name:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          type: string
        status:
          type: string
        updated_at:
          type: string
    models.UserProfile:
      type: object
      properties:
        created_at:
          type: string
        email:
          type: string
        id:
          type: string
        name:
          type: string
    models.UserProfileUpdate:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
