openapi: 3.0.3
info:
  title: Carbon Trading API
  description: API for managing user profiles, authentication, and carbon trading platform features.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  /register:
    post:
      summary: Register a new user
      description: Creates a new user in the Supabase database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  result:
                    type: object
        400:
          description: Invalid input
        500:
          description: Failed to insert user

  /profile:
    get:
      summary: View user profile
      description: Retrieves the user's profile information.
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ViewProfile handler is not implemented yet
        500:
          description: Internal server error
    put:
      summary: Update user profile
      description: Updates the user's profile information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: newusername
                email:
                  type: string
                  example: newemail@example.com
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
        400:
          description: Invalid input
        500:
          description: Internal server error

  /profile/picture:
    post:
      summary: Upload profile picture
      description: Uploads a profile picture for the user.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded successfully
        400:
          description: Invalid file format
        500:
          description: Internal server error
